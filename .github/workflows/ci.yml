# GitHub Actions configuration **EXAMPLE**,
# MODIFY IT ACCORDING TO YOUR NEEDS!
# Reference: https://docs.github.com/en/actions

name: export

on:
  push:
    # Avoid using all the resources/limits available by checking only
    # relevant branches and tags. Other branches can be checked via PRs.
    branches: [main, master, stress_nasatlx]
    tags: ['v[0-9]*', '[0-9]+.[0-9]+*']  # Match tags that resemble a version
  pull_request:  # Run in every PR
  workflow_dispatch:  # Allow manually triggering the workflow
  schedule:
    # Run roughly every 15 days at 00:00 UTC
    # (useful to check if updates on dependencies break the package)
    - cron: '0 0 1,16 * *'

permissions:
  contents: read

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref_type }}-
    ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  pyinstaller-build:
    strategy:
      matrix:
        platform:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Homebrew
        if: matrix.platform == 'macos-latest'
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      - name: Install gettext
        if: matrix.platform == 'macos-latest'
        run: brew install gettext
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1

      - name: Link gettext
        if: matrix.platform == 'macos-latest'
        run: brew link --force gettext
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Create .venv
        run: python -m venv .venv

      - name: Install current package in .venv
        run: pip install pyglet==1.5.26 rstr==3.1.0 pyparallel==0.2.2 pylsl==1.16.1
      
     - name: Get run number
        id: run_number
        run: echo "run_number=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Create Executable on Unix
        if: matrix.platform != 'windows-latest'
        uses: sayyid5416/pyinstaller@v1
        with:
          python_ver: '3.11'
          spec: 'main.py'
          requirements: 'requirements.txt'
          upload_exe_with_name: 'My executable'
          options: --onefile, --name "My App ${{ matrix.platform }} ${{ env.run_number }}", --windowed, --add-data "assets:assets/"

      - name: Create Executable on Windows
        if: matrix.platform == 'windows-latest'
        uses: sayyid5416/pyinstaller@v1
        with:
          python_ver: '3.11'
          spec: 'main.py'
          requirements: 'requirements.txt'
          upload_exe_with_name: 'My executable ${{ matrix.platform }}'
          options: --onefile, --name "My App ${{ matrix.platform }} ${{ env.run_number }}", --windowed, --add-data "assets;assets/"
